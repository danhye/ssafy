import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.net.HttpURLConnection;
import java.net.URL;
import org.json.JSONArray;
import org.json.JSONObject;

public class MyGPT extends JFrame {
    private JTextArea chatArea;
    private JTextField inputField;
    private JButton sendButton;
    private JSONArray messages = new JSONArray();

    // OpenAI API Ï†ïÎ≥¥
    private static final String API_KEY = "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";
    private static final String GPT_URL = "https://api.openai.com/v1/chat/completions";
    
    // ÌôîÎ©¥ Íµ¨ÏÑ±ÌïòÍ∏∞ ( ÏÉùÏÑ±Ïûê Ìï®Ïàò ) : Ï¥àÍ∏∞ ÌôîÎ©¥ÏùÑ ÎßåÎìúÎäî Î∂ÄÎ∂Ñ
    public MyGPT() {
        setTitle("üí¨ MyGPT ÏôÄ ÎåÄÌôîÌïòÍ∏∞");
        setSize(500, 600); // Ï∞Ω ÌÅ¨Í∏∞
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // Ï∞Ω Îã´ÏúºÎ©¥ ÌîÑÎ°úÍ∑∏Îû® Ï¢ÖÎ£å
        setLayout(new BorderLayout()); // Ï∞ΩÏùÑ ÏúÑÏïÑÎûòÎ°ú ÎÇòÎàÑÍ∏∞ (Íµ¨Ïó≠ Î∂ÑÌï†)

        // Ï±ÑÌåÖÏ∞Ω ÏòÅÏó≠ ( ÏÇ¨Ïö©ÏûêÍ∞Ä Ïì¥ ÎßêÍ≥º Ï±óÎ¥áÏù¥ ÏùëÎãµÌïú ÎÇ¥Ïö©ÏùÑ chatAreaÏóê Ï∂úÎ†•
        chatArea = new JTextArea(); // Ï±ÑÌåÖ ÎÇ¥Ïó≠ Î≥¥Ïó¨ Ï§Ñ ÌÖçÏä§Ìä∏ Î∞ïÏä§
        chatArea.setEditable(false); // ÏÇ¨Ïö©ÏûêÍ∞Ä ÏàòÏ†ï ÌïòÏßÄ Î™ªÌïòÎèÑÎ°ù ÏÑ§Ï†ï
        chatArea.setLineWrap(true); // Ï§ÑÎ∞îÍøà ÌóàÏö©
        JScrollPane scrollPane = new JScrollPane(chatArea); // Ïä§ÌÅ¨Î°§ Î∂ôÏù¥Í∏∞
        add(scrollPane, BorderLayout.CENTER); // Ï∞Ω Ï§ëÏïôÏóê Î∞∞Ïπò

        // ÏûÖÎ†•Ï∞ΩÍ≥º Î≤ÑÌäº
        JPanel inputPanel = new JPanel(new BorderLayout());
        inputField = new JTextField(); // ÏûÖÎ†•Ï∞Ω
        sendButton = new JButton("Ï†ÑÏÜ°");
        
        // ÏûÖÎ†•Ï∞ΩÍ≥º Î≤ÑÌäºÏùÑ BorderLayout.SOUTH (ÏïÑÎûòÏ™Ω) Ïóê ÎÑ£Í∏∞
        inputPanel.add(inputField, BorderLayout.CENTER);
        inputPanel.add(sendButton, BorderLayout.EAST);
        add(inputPanel, BorderLayout.SOUTH);

        // Ïù¥Î≤§Ìä∏ Îì±Î°ù (Î≤ÑÌäºÏùÑ ÎàÑÎ•¥Í±∞ÎÇò ÏóîÌÑ∞Î•º ÏπòÎ©¥ sendMessage() Ìï®Ïàò Ïã§Ìñâ)
        sendButton.addActionListener(e -> sendMessage());
        inputField.addActionListener(e -> sendMessage());

        setVisible(true); // Ïù¥Í±∞ Î≠êÏûÑ? 
    }

    private void sendMessage() { // ÏÇ¨Ïö©ÏûêÍ∞Ä ÏûÖÎ†•ÌïòÎ©¥ Ï±óÎ¥áÏóêÍ≤å ÏöîÏ≤≠ÏùÑ Î≥¥ÎÇ¥Îäî Ìï®Ïàò
    	
    	/*
    	 * Ïó≠Ìï† ÏöîÏïΩ :
    	 * 1. ÏûÖÎ†•Ï∞ΩÏóêÏÑú ÏÇ¨Ïö©Ïûê Îßê Í∫ºÎÉÑ
    	 * 2. chatAreaÏóê ÏÇ¨Ïö©Ïûê Î©îÏãúÏßÄ Ï∂úÎ†•
    	 * 3. APIÏóê ÏöîÏ≤≠ -> ÏùëÎãµ Î∞õÏïÑÏÑú Ï∂úÎ†•
    	 */
    	
        String userText = inputField.getText().trim(); // ÏÇ¨Ïö©Ïûê ÏûÖÎ†• Í∑ºÎç∞ trim() ÏùÄ Ïôú ÌïòÏßÄ? 
        if (userText.isEmpty()) return; // ÏûÖÎ†• ÏóÜÏúºÎ©¥ Ï¢ÖÎ£å

        chatArea.append("üë§ ÎÇò: " + userText + "\n"); // ÎÇ¥Í∞Ä Ìïú Îßê Ï∂úÎ†•
        inputField.setText("");

        JSONObject userMsg = new JSONObject();
        userMsg.put("role", "user");
        userMsg.put("content", userText);
        messages.put(userMsg);

        new Thread(() -> {
            try {
                String response = sendToGPT(messages);

                JSONObject assistantMsg = new JSONObject();
                assistantMsg.put("role", "assistant");
                assistantMsg.put("content", response);
                messages.put(assistantMsg);

                SwingUtilities.invokeLater(() -> {
                    chatArea.append("ü§ñ Ï±óÎ¥á: " + response + "\n\n");
                });
            } catch (IOException e) {
                SwingUtilities.invokeLater(() -> {
                    chatArea.append("‚ùå Ïò§Î•ò: " + e.getMessage() + "\n");
                });
            }
        }).start();
    }

    private String sendToGPT(JSONArray messages) throws IOException {
        URL url = new URL(GPT_URL);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();

        conn.setRequestMethod("POST");
        conn.setRequestProperty("Authorization", "Bearer " + API_KEY);
        conn.setRequestProperty("Content-Type", "application/json");
        conn.setDoOutput(true);

        JSONObject request = new JSONObject();
        request.put("model", "gpt-4o-mini");
        request.put("temperature", 0.7);
        request.put("messages", messages);

        try (BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(conn.getOutputStream()))) {
            bw.write(request.toString());
        }

        StringBuilder sb = new StringBuilder();
        try (BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()))) {
            String line;
            while ((line = br.readLine()) != null) {
                sb.append(line);
            }
        }

        JSONObject root = new JSONObject(sb.toString());
        return root.getJSONArray("choices")
                   .getJSONObject(0)
                   .getJSONObject("message")
                   .getString("content")
                   .trim();
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(MyGPT::new);
    }
}
